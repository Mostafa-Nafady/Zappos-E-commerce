'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zfcSessionId = exports.saveTestsToCookie = exports.encodeCookie = exports.forceAssignments = exports.createInitialCookie = exports.getTestsFromCookie = exports.zfcSendEvent = exports.zfcRecordTest = exports.plugToRequest = exports.getZfcCookie = exports.expires = undefined;

var _reactCookie = require('react-cookie');

var _reactCookie2 = _interopRequireDefault(_reactCookie);

var _protobufjs = require('protobufjs');

var _protobufjs2 = _interopRequireDefault(_protobufjs);

var _config = require('./config');

var _lodash = require('lodash.padstart');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cookieProtobuf = '\npackage zfc;\nmessage Cookie {\n  message Session {\n    required uint64  timestamp   = 1;\n    required uint64  connection  = 2;\n    optional uint64  timestamp2  = 3;\n  }\n  message Test {\n    required string  name        = 1;\n    optional uint32  index       = 2;\n    optional uint32  phase       = 3;\n    optional bool    active      = 4;\n    optional uint64  timestamp   = 5;\n  }\n  required Session   session     = 1;\n  repeated Test      tests       = 2;\n  option optimize_for=SPEED;\n}\n';

var encode = function encode(alreadyEncoded) {
  return alreadyEncoded;
};

// getting a zfc session id: https://github01.zappos.net/Integ/zfc/blob/f66eae5bf94bcdc533fc67cd33e277887d97274a/log/common/zfc_packet.cc#L119
var toPaddedHex = function toPaddedHex(input) {
  return (0, _lodash2.default)(input.toString(16), 16, '0');
};

var builder = _protobufjs2.default.parse(cookieProtobuf, { keepCase: true }).root,
    ZfcCookie = builder.lookup('zfc.Cookie'),
    HydraTest = ZfcCookie.Test;

/**
 * Generate a ZFC cookie expires
 */
var expires = exports.expires = function expires() {
  var expires = new Date();
  expires.setDate(expires.getDate() + 365 * 30);
  return expires;
};

/**
 * Get the ZFC cookie
 *
 * Returns undefined if the cookie is not set or the cookie is malformed
 * and cannot be decoded.
 */
var getZfcCookie = exports.getZfcCookie = function getZfcCookie() {
  var cookieName = (0, _config.getConfig)('cookieName');
  var b64Cookie = _reactCookie2.default.load(cookieName);
  if (b64Cookie) {
    try {
      return ZfcCookie.decode(Buffer.from(b64Cookie, 'base64'));
    } catch (error) {
      console.log('Error decoding malformed cookie: ' + error + ' (value: \'' + b64Cookie + '\')');
    }
  }
};

/**
 * Allow ZFC cookie operations/functions to be plugged into express.
 */
var plugToRequest = exports.plugToRequest = _reactCookie2.default.plugToRequest;

/**
 * Record a test. Recorded tests will be fired off with zfc.sendEvent
 * See recordTest in zfcAsync.js in Karakoram for usage
 */
var zfcRecordTest = exports.zfcRecordTest = function zfcRecordTest(name, treatment, index, lastIndex) {
  var win = arguments.length <= 4 || arguments[4] === undefined ? window : arguments[4];

  if (win.zfc) {
    win.zfc.push(['recordTest', name, treatment, index, lastIndex]);
  }
};

/**
 * Send an event bundle. This will cause any recorded tests to be sent.
 */
var zfcSendEvent = exports.zfcSendEvent = function zfcSendEvent() {
  var win = arguments.length <= 0 || arguments[0] === undefined ? window : arguments[0];

  if (win.zfc) {
    win.zfc.push(['sendEvent']);
  }
};

/**
 * Get all test tests from the ZFC cookie
 */
var getTestsFromCookie = exports.getTestsFromCookie = function getTestsFromCookie() {
  var zfc = getZfcCookie();
  return zfc && zfc.tests ? zfc.tests : [];
};

/**
 * Create the initial ZFC cookie if it does not exist yet
 */
// TODO: write tests for this
var createInitialCookie = exports.createInitialCookie = function createInitialCookie() {
  var session = ZfcCookie.Session.create({
    timestamp: +new Date(),
    connection: parseInt(Math.random() * 1e13, 10),
    timestamp2: +new Date()
  });

  var data = ZfcCookie.create({
    session: session,
    tests: []
  });

  return data;
};

var forceAssignments = exports.forceAssignments = function forceAssignments(zfc, tests) {
  zfc.tests = tests.map(function (_ref) {
    var name = _ref.name;
    var index = _ref.index;
    var phase = _ref.phase;
    var _ref$timestamp = _ref.timestamp;
    var timestamp = _ref$timestamp === undefined ? null : _ref$timestamp;
    var _ref$active = _ref.active;
    var active = _ref$active === undefined ? null : _ref$active;

    return HydraTest.create({ name: name, index: index, phase: phase, active: active, timestamp: timestamp });
  });
  return zfc;
};

var encodeCookie = exports.encodeCookie = function encodeCookie(zfc) {
  return Buffer.from(ZfcCookie.encode(zfc).finish()).toString('base64');
};

/**
 * Save updated tests to the ZFC cookie
 */
var saveTestsToCookie = exports.saveTestsToCookie = function saveTestsToCookie(tests, _ref2) {
  var domain = _ref2.domain;

  var zfc = getZfcCookie() || createInitialCookie();
  var b64Cookie = encodeCookie(forceAssignments(zfc, tests));
  var cookieName = (0, _config.getConfig)('cookieName');
  _reactCookie2.default.save(cookieName, b64Cookie, { path: '/', expires: expires(), domain: domain, encode: encode });
};

var zfcSessionId = exports.zfcSessionId = function zfcSessionId() {
  var zfc = arguments.length <= 0 || arguments[0] === undefined ? getZfcCookie() : arguments[0];

  if (zfc && zfc.session) {
    return toPaddedHex(zfc.session.timestamp) + toPaddedHex(zfc.session.connection);
  }
};