"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Get the a/b test assignment
 * @param {string} name - name of the a/b test to get the assignment for
 * @param {Object} state - application state
 * @return {Object} assignment
 */
var getAssignment = exports.getAssignment = function getAssignment(name, state) {
  if (state.ab && state.ab.assignments && state.ab.assignments[name]) {
    return state.ab.assignments[name];
  }
  return null;
};

/**
 * Get the a/b test assignment group
 * @param {string} name - name of the a/b test to get the assignment for
 * @param {Object} state - application state
 * @return {number} index - group the user is a member of (possibly null).
 */
var assignedIndex = exports.assignedIndex = function assignedIndex(name, state) {
  var assignment = getAssignment(name, state);
  if (assignment) {
    return assignment.index;
  }
  return null;
};

/**
 * Get the test with the given name
 * @param {string} name - name of the test to get
 * @param {Object} state - application state
 * @return {Object} test - test with the given name
 */
var getTest = exports.getTest = function getTest(name, state) {
  if (state.ab && state.ab.tests) {
    for (var i = 0; i < state.ab.tests.length; i++) {
      if (state.ab.tests[i].name === name) {
        return state.ab.tests[i];
      }
    }
  }
  return null;
};

/**
 * Get the assigned index for active tests only. If the user has an assignment
 * for the test but the test is not active for this site, null will be returned.
 *
 * @param {string} name - name of the a/b test to get the assignment for
 * @param {object} state - application state
 * @return {number} index - group the user is a member of (possibly null).
 */
var activeAssignedIndex = exports.activeAssignedIndex = function activeAssignedIndex(name, state) {
  var index = assignedIndex(name, state);
  if (index !== null) {
    if (getTest(name, state)) {
      return index;
    }
  }
  return null;
};

/**
 * Get the queue from the state
 * @param {Object} state - redux state
 * @return current queue
 */
var getQueue = exports.getQueue = function getQueue(state) {
  return state.ab ? state.ab.queue : null;
};

/**
 * Clear out the queue.
 * @param {Object} state
 * @return {Object} new state
 */
var clearQueue = exports.clearQueue = function clearQueue(state) {
  var ab = Object.assign({}, state.ab || {}, { queue: [] });
  return Object.assign({}, state, { ab: ab });
};

/**
 * Get the current assignments.
 * @param {Object} state - application state
 * @return {Object} assignments
 */
var getCurrentAssignments = exports.getCurrentAssignments = function getCurrentAssignments(state) {
  if (state.ab && state.ab.assignments) {
    return state.ab.assignments;
  }
  return null;
};