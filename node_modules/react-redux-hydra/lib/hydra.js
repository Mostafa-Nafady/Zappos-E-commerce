'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchActiveTests = exports.activeTestsForHosts = exports.abAssignmentsToHydraAssignments = exports.hydraAssignmentsToAbAssignments = exports.hydraAssignmentToAbAssignment = undefined;

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert a hydra assingment to a generic a/b test assignment. This is really
 * just moving properties to a new/clean object.
 * @param {Object} test - hydra test
 * @return {Object} abTest
 */
var hydraAssignmentToAbAssignment = exports.hydraAssignmentToAbAssignment = function hydraAssignmentToAbAssignment(_ref) {
  var index = _ref.index;
  var phase = _ref.phase;
  var timestamp = _ref.timestamp;
  var name = _ref.name;
  var active = _ref.active;

  return { index: index, phase: phase, timestamp: timestamp, name: name, active: active };
};

/**
 * Convert a list of  hydra assingments to a generic a/b test assignments.
 * @param {Object[]} tests - hydra tests
 * @return {Object} abTests
 */
var hydraAssignmentsToAbAssignments = exports.hydraAssignmentsToAbAssignments = function hydraAssignmentsToAbAssignments() {
  var hydraAssignments = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

  var assignments = {};
  hydraAssignments.forEach(function (hydraAssignment) {
    assignments[hydraAssignment.name] = hydraAssignmentToAbAssignment(hydraAssignment);
  });
  return assignments;
};

/**
 * Convert an object of a/b test assignments to a list of hydra assignments
 * @param {Object} assingments - a/b test assignments
 * @return {Object[]} hydraAssignments - list of hydra assignments
 */
var abAssignmentsToHydraAssignments = exports.abAssignmentsToHydraAssignments = function abAssignmentsToHydraAssignments() {
  var assignments = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  return (0, _utils.values)(assignments);
};

/**
 * Extract the active tests for the given hosts
 */
var activeTestsForHosts = exports.activeTestsForHosts = function activeTestsForHosts(tests, hosts) {
  var hostLookup = {};
  hosts.forEach(function (host) {
    hostLookup[host] = true;
  });

  return tests.filter(function (test) {
    var activeHosts = test.active_hosts || [];
    for (var i = 0; i < activeHosts.length; i++) {
      if (hostLookup[activeHosts[i]]) {
        return true;
      }
    }
  });
};

/**
 * Fetch the active hydra tests from the given url
 */
var fetchActiveTests = exports.fetchActiveTests = function fetchActiveTests(url, hosts) {
  var fetcher = arguments.length <= 2 || arguments[2] === undefined ? _isomorphicFetch2.default : arguments[2];

  return fetcher(url).then(function (response) {
    if (response.status >= 400) {
      throw new Error("Bad response from server");
    }
    return response.json();
  }).then(function (tests) {
    return hosts ? activeTestsForHosts(tests, hosts) : tests;
  });
};