'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.triggerAssignmentFactory = exports.triggerAssignment = exports.recordTest = exports.fetchCookieAssignments = exports.receiveActiveTestsAndSyncCookie = exports.forceAssignment = exports.fetchTests = exports.dispatchTransformedPromise = exports.defaultTransformer = exports.generateAssignment = exports.queueRecordTest = exports.receiveTestAssignments = exports.receiveTestAssignment = exports.receiveActiveTests = undefined;

var _constants = require('./constants');

var _hydra = require('./hydra');

var _abState = require('./abState');

var _zfc = require('./zfc');

/**
 * Create RECEIVE_ACTIVE_TESTS action
 * @param {Object[]} tests - array of active tests
 */
var receiveActiveTests = exports.receiveActiveTests = function receiveActiveTests(tests) {
  return {
    type: _constants.RECEIVE_ACTIVE_TESTS,
    tests: tests
  };
};

/**
 * Create RECEIVE_TEST_ASSIGNMENT action
 * @param {Object} assignment - assignment
 */
var receiveTestAssignment = exports.receiveTestAssignment = function receiveTestAssignment(assignment) {
  return {
    type: _constants.RECEIVE_TEST_ASSIGNMENT,
    assignment: assignment
  };
};

/**
 * Create RECEIVE_ASSIGNMENTS action
 * @param {Object} assignments - entire set of assignments for user
 */
var receiveTestAssignments = exports.receiveTestAssignments = function receiveTestAssignments(assignments) {
  return {
    type: _constants.RECEIVE_TEST_ASSIGNMENTS,
    assignments: assignments
  };
};

/**
 * Create a QUEUE_RECORD_TEST action
 * @param {Object} treatment
 */
var queueRecordTest = exports.queueRecordTest = function queueRecordTest(treatment) {
  return {
    type: _constants.QUEUE_RECORD_TEST,
    treatment: treatment
  };
};

/**
 * Generate an assignment for the test. If the test is mis-configured, no
 * assignment will happen.
 * @param {Object} test - a hydra test
 * @return {Object} assignment - new assignment including group or phase or null.
 */
var generateAssignment = exports.generateAssignment = function generateAssignment(test) {
  if (test.variants) {
    var magicNumber = Math.random(),
        len = test.variants.length;
    var sum = 0;
    for (var i = 0; i < len; i++) {
      sum += test.variants[i].chance;
      if (magicNumber <= sum) {
        return {
          index: i,
          phase: test.phase,
          timestamp: null,
          name: test.name,
          active: true
        };
      }
    }
  }
  // if the test was mis-configured, no assignment will happen
  return null;
};

/**
 * No-op transformer
 */
var defaultTransformer = exports.defaultTransformer = function defaultTransformer(thing) {
  return thing;
};

/**
 * After the promise thens, transform the result and dispatch
 * @param {function} dispatch
 * @param {Object} promise
 * @param {function} transformer - optional transformation function
 */
var dispatchTransformedPromise = exports.dispatchTransformedPromise = function dispatchTransformedPromise(dispatch, promise) {
  var transformer = arguments.length <= 2 || arguments[2] === undefined ? defaultTransformer : arguments[2];

  return promise.then(function (thing) {
    return dispatch(transformer(thing));
  });
};

/**
 * Fetch tests from the remote API and dispatch action when they are received
 * @param {string} url - url of remote tests
 * @return {function}
 */
var fetchTests = exports.fetchTests = function fetchTests(url, domain, hosts) {
  return function (dispatch) {
    return (0, _hydra.fetchActiveTests)(url, hosts).then(function (tests) {
      dispatch(receiveActiveTestsAndSyncCookie(tests, domain));
    });
  };
};

var forceAssignment = exports.forceAssignment = function forceAssignment(domain, name, group) {
  return function (dispatch, getState) {
    var test = (0, _abState.getTest)(name, getState());

    if (!test) {
      return null;
    }

    var newAssignment = {
      index: group,
      phase: test.phase,
      timestamp: null,
      name: name,
      active: true
    };
    dispatch(fetchCookieAssignments());
    var result = dispatch(receiveTestAssignment(newAssignment));
    syncCookieFromAssignmentState(getState(), domain.domain);
    return result;
  };
};

/**
 * Receive active hydra tests and sync the assignments to the cookie.
 */
var receiveActiveTestsAndSyncCookie = exports.receiveActiveTestsAndSyncCookie = function receiveActiveTestsAndSyncCookie(tests, domain) {
  return function (dispatch, getState) {
    dispatch(fetchCookieAssignments());
    var result = dispatch(receiveActiveTests(tests));
    syncCookieFromAssignmentState(getState(), domain);
    return result;
  };
};

/**
 * Retrieve the initial assignments
 * @return {Object} action
 */
var fetchCookieAssignments = exports.fetchCookieAssignments = function fetchCookieAssignments() {
  return receiveTestAssignments((0, _hydra.hydraAssignmentsToAbAssignments)((0, _zfc.getTestsFromCookie)()));
};

/**
 * Record the test directly if we're running on the client, or stash it in
 * the state, if we appear to be running on the server
 */
var recordTest = exports.recordTest = function recordTest(name, treatment, index, lastIndex) {
  return function (dispatch) {
    if (typeof window !== 'undefined') {
      // We're running on the client, so send directly to zfc async
      (0, _zfc.zfcRecordTest)(name, treatment, index, lastIndex);
      (0, _zfc.zfcSendEvent)();
    } else {
      dispatch(queueRecordTest({ name: name, treatment: treatment, index: index, lastIndex: lastIndex }));
    }
  };
};

var syncCookieFromAssignmentState = function syncCookieFromAssignmentState(state, domain) {
  (0, _zfc.saveTestsToCookie)((0, _hydra.abAssignmentsToHydraAssignments)((0, _abState.getCurrentAssignments)(state)), { domain: domain });
};

/**
 * Trigger an assignment.
 *
 * @param {string} name - name of the test
 * @param {Object} options - an object of options including:
 *                           domain: domain of the zfc cookie
 * @return {object}          assigment object or null if no assignment
 */
var triggerAssignment = exports.triggerAssignment = function triggerAssignment(name) {
  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var domain = _ref.domain;

  return function (dispatch, getState) {
    // In order to best keep things in sync, we should always treat the cookie
    // as authoritative. Before considering an assignment, we should read the
    // cookie, then apply the assignment if appropriate, then store back to the
    // cookie.
    dispatch(fetchCookieAssignments());

    var state = getState(),
        test = (0, _abState.getTest)(name, state),
        assignment = (0, _abState.getAssignment)(name, state);

    if (!test) {
      return null;
    }

    if (assignment && assignment.phase >= test.phase) {
      // already assigned in this or next phase
      recordTest(name, _constants.HYDRA_TREATMENT_APPLIED, assignment.index)(dispatch);
      return Object.assign({}, assignment);
    }

    // no existing assignment or assigned to an old phase, so create a new
    // assignment
    var newAssignment = generateAssignment(test),
        lastIndex = assignment ? assignment.index : null,
        treatment = assignment ? _constants.HYDRA_TREATMENT_REASSIGNED : _constants.HYDRA_TREATMENT_ASSIGNED;

    dispatch(receiveTestAssignment(newAssignment));
    syncCookieFromAssignmentState(getState(), domain);

    // tell zfc about the new test assignment. this is how EDW finds out about
    // the test and that it was "applied" on this page.
    recordTest(name, treatment, newAssignment.index, lastIndex)(dispatch);

    return Object.assign({}, newAssignment);
  };
};

/**
 * Returns a triggerAssignment function with the factory opts already set.
 */
var triggerAssignmentFactory = exports.triggerAssignmentFactory = function triggerAssignmentFactory() {
  var factoryOpts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  return function (name) {
    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    return triggerAssignment(name, Object.assign({}, factoryOpts, opts));
  };
};