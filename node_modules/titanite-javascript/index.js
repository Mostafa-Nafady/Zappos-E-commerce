(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    define([], factory);
  } else if (typeof module === 'object' && module.exports) {
    module.exports = factory();
  } else {
    root.Titanite = factory();
  }
})(this, function () {

  var Titanite = (function () {
    var WEBSITE_DOMAINS = Object.freeze({
      'www.zappos.com': 'ZAPPOS_DESKTOP',
      'm.zappos.com': 'ZAPPOS_MOBILE',
      'luxury.zappos.com': 'ZAPPOS_LUXURY',
      'www.6pm.com': 'SIXPM_DESKTOP',
      'm.6pm.com': 'SIXPM_MOBILE',
      'www.findzen.com': 'ZEN',
      'findzen.com': 'ZEN',
      'www.vrsnl.com': 'VRSNL',
      'vrsnl.com': 'VRSNL',
      'www.cncpts.com': 'CNCPTS',
      'cncpts.com': 'CNCPTS',
      'www.rookieusa.com': 'ROOKIE_USA',
      'rookieusa.com': 'ROOKIE_USA',
      'unknown': 'UNKNOWN',
      find: function (value) {
        for (var key in this) {
          if (this[key] === value) {
            return value;
          }
        }

        return this.unknown;
      }
    });

    var DEFAULT_COOKIES = Object.freeze([
      { cookieName: 'x-main', eventFieldName: 'xMainCookie' }
    ]);

    var DEFAULT_CONFIG = Object.freeze({
      amethystEnv: 'prod',
      eventType: 'websiteEvent',
      websiteDomain: WEBSITE_DOMAINS.unknown,
      enableSendBeacon: true,
      requestMethod: 'POST',
      excludedDefaultFields: [],
      shouldExcludeDefaultField: function (fieldName) {
        return this.excludedDefaultFields.indexOf(fieldName) >= 0;
      },
      merge: function (config) {
        var merged = {};

        for (var key in this) {
          var value = config[key];
          merged[key] = typeof value !== 'undefined' ? value : this[key];
        }

        return merged;
      }
    });

    return function (config) {
      if (!(this instanceof Titanite)) {
        return new Titanite(config);
      }

      if (typeof config !== 'object') {
        config = {};
      }

      if (!Array.isArray(config.excludedDefaultFields)) {
        config.excludedDefaultFields = [];
      }

      // figure out some defaults
      if (config.websiteDomain) {
        config.websiteDomain = WEBSITE_DOMAINS[config.websiteDomain] || WEBSITE_DOMAINS.find(config.websiteDomain);
      } else if (typeof window !== 'undefined' && window.location) {
        config.websiteDomain = WEBSITE_DOMAINS[window.location.hostname];
      }

      this.config = DEFAULT_CONFIG.merge(config);

      // auto-set amethyst environment if not explicitly supplied via config and domain is unknown
      if (!config.amethystEnv && this.config.websiteDomain === WEBSITE_DOMAINS.unknown) {
        this.config.amethystEnv = 'dev';
      }

      var sessionViewIds = {};
      var defaultFieldValues = {};
      var referrer = typeof document === 'object' && typeof document.referrer === 'string' ? document.referrer : '';
      var href = getHashlessHref();

      // since can't do true private members at least make 'em read-only, non-configurable, non-enumerable
      Object.defineProperties(this, {
        sessionViewIds: {
          get: function () {
            return sessionViewIds;
          }
        },
        defaultFieldValues: {
          get: function () {
            return defaultFieldValues;
          }
        },
        referrer: {
          get: function () {
            var curHref = getHashlessHref();
            if (curHref !== href) {
              referrer = href;
              href = curHref;
            }
            return referrer;
          }
        }
      });

      // add default cookies (if available)
      if (typeof document === 'object' && typeof document.cookie === 'string') {
        DEFAULT_COOKIES.forEach(function (c) {
          if (this.config.shouldExcludeDefaultField(c.eventFieldName)) {
            return;
          }

          var regEx = new RegExp('(?:(?:^|.*;\\s*)' + c.cookieName + '\\s*\\=\\s*([^;]*).*$)|^.*$');
          var value = document.cookie.replace(regEx, '$1');
          if (value) {
            this.setDefaultFieldValue(c.eventFieldName, value);
          }
        }, this);
      }

      // add timezone (if available)
      if (typeof Intl === 'object' && typeof Intl.DateTimeFormat === 'function' && !this.config.shouldExcludeDefaultField('timezone')) {
        var timeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;
        if (timeZone) {
          this.setDefaultFieldValue('timezone', timeZone);
        }
      }

      // add website domain
      if (!this.config.shouldExcludeDefaultField('websiteDomain')) {
        this.setDefaultFieldValue('websiteDomain', this.config.websiteDomain);
      }

      // add user agent
      if (typeof window === 'object' && window.navigator && typeof window.navigator.userAgent === 'string' && !this.config.shouldExcludeDefaultField('userAgent')) {
        this.setDefaultFieldValue('userAgent', window.navigator.userAgent);
      }

      return this;
    };
  })();

  Titanite.prototype = (function () {
    var IS_NODE = typeof window === 'undefined' && typeof require === 'function';
    var MAX_RETRIES = 3;

    function Amethyst(hostname) {
      return Object.freeze({
        protocol: 'https:',
        hostname: hostname,
        port: 443,
        method: 'POST',
        endpoints: {
          events: '/api/v1/events'
        },
        toString: function (path) {
          return this.protocol + '//' + this.hostname + ':' + this.port + path;
        }
      });
    }

    var AMETHYST_ENVS = {
      prod: Amethyst('amethyst.zappos.com'),
      dev: Amethyst('beta-api.amethyst.zappos.a2z.com')
    };

    var EXCEPTIONS = Object.freeze({
      NO_BASE_URL: 'Cannot communicate with Amethyst API - amethystBaseUrl not provided.',
      NO_EVENT_ENDPOINT: 'Cannot communicate with Amethyst API - events endpoint not provided',
      ERROR_SENDING: 'Encountered error when sending batch of events. Retrying.',
      MAX_RETRIES: 'Forced to drop events because of max retries reached.',
      NO_EVENTS: 'No events to send',
      SEND_EVENTS: 'Cannot send events.',
      INCORRECT_BINDING: 'This is a private instance method, need to invoke via call or apply.',
      UUID: 'Generating weak UUID.',
      PARSING_RESPONSE: 'Cannot parse response.'
    });

    var UTM_PREFIX = /^utm_/i;

    /*
      below regexps intended for String.prototype.replace usage only, not for RegExp.prototype.test|exec
      to prevent confusion around mutation of `lastIndex` property on the RegExp:
      - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test#using_test_on_a_regex_with_the_global_flag
      - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec#return_value
    */
    var INVALID_UTM_CHARS = /[^a-z_]/gi;
    var SNAKE_CASE_DELIMETER = /_([a-z])/g;

    // private static methods
    // source: https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript#answer-2117523
    function s4() {
      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    }

    function generateUuid() {
      var win = typeof window !== 'undefined' ? window : {};
      var crypto = win.crypto || win.msCrypto || win.webkitCrypto;

      if (crypto) {
        return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
          return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);
        });
      } else if (IS_NODE) {
        crypto = require('crypto');

        var bytes = crypto.randomBytes(16);

        bytes[6] &= 0x0f; // 0000xxxx
        bytes[6] += 0x40; // 0100xxxx

        bytes[8] &= 0x3f; // 00xxxxxx
        bytes[8] += 0x80; // 10xxxxxx

        return [0, 4, 6, 8, 10].map(function (len, i, arr) {
          return bytes.slice(len, arr[i + 1]).toString('hex');
        }).join('-');
      } else {
        console.info(EXCEPTIONS.UUID);
        return [s4() + s4(), s4(), s4(), s4(), s4() + s4() + s4()].join('-');
      }
    }

    function tryParse(res) {
      var json;

      try {
        json = JSON.parse(res);
      } catch (ex) {
        json = {};
        console.warn(EXCEPTIONS.PARSING_RESPONSE);
      }

      return json;
    }

    function beforeUnload() {
      console.warn('Page unloading with request to Amethyst in flight; the browser may cancel.');
    }

    // private instance methods (use call or apply)
    function sendRequest(endpoint, body, sendResponse) {
      if (!(this instanceof Titanite)) {
        throw EXCEPTIONS.INCORRECT_BINDING;
      }

      var amethyst = AMETHYST_ENVS[this.config.amethystEnv];
      var data = JSON.stringify(body);
      var url = amethyst.toString(endpoint);
      var contentType = 'application/json';
      var win = typeof window === 'object' ? window : {};

      // chrome bug with sendBeacon and json (Amethyst is set up to convert text/plain to application/json)
      // https://groups.google.com/a/chromium.org/forum/#!topic/chromium-html5/nIUpdjPF1kA
      // https://bugs.chromium.org/p/chromium/issues/detail?id=724929
      if (this.config.enableSendBeacon && win.navigator && typeof win.navigator.sendBeacon === 'function') {
        var hasSent = win.navigator.sendBeacon(url + '?X-Amethyst-Location=' + encodeURIComponent(win.location.href), new Blob([data], { type: 'text/plain' }));
        sendResponse({ success: hasSent, statusCode: 200, failedEvents: [] });
      } else if (typeof XMLHttpRequest !== 'undefined') {
        var xhr = new XMLHttpRequest();
        var isGet = this.config.requestMethod === 'GET';

        win.addEventListener('beforeunload', beforeUnload, true);

        xhr.onload = function () {
          window.removeEventListener('beforeunload', beforeUnload, true);
          var response = tryParse(this.responseText);
          sendResponse({
            success: true,
            statusCode: this.status,
            statusMessage: this.statusText,
            message: response.message,
            failedEvents: response.failedEvents
          });
        };

        xhr.onerror = function () {
          window.removeEventListener('beforeunload', beforeUnload, true);
          sendResponse({ success: false });
        };

        if (isGet) {
          xhr.open('GET', url + '?e=' + win.btoa(unescape(encodeURIComponent(data)))); // reference: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/btoa#Unicode_strings
        } else {
          xhr.open('POST', url);
          xhr.setRequestHeader('Content-Type', contentType);
        }

        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        xhr.setRequestHeader('X-Amethyst-Location', win.location.href);

        xhr.send(isGet ? null : data);
      } else if (IS_NODE) {
        var https = amethyst.protocol === 'https:' ? require('https') : require('http');
        var options = Object.assign({}, amethyst, { path: endpoint, headers: { 'Content-Type': contentType, 'Content-Length': Buffer.byteLength(data) } });
        var req = https.request(options, function (res) {
          var body = '';

          res.setEncoding('utf8');
          res.on('data', function (chunk) {
            body += chunk;
          }).on('end', function () {
            var response = tryParse(body);
            sendResponse({
              success: true,
              statusCode: res.statusCode,
              statusMessage: res.statusMessage,
              message: response.message,
              failedEvents: response.failedEvents
            });
          });
        });

        req.on('error', function (err) {
          console.error(err);
          sendResponse({ success: false });
        });

        req.write(data);
        req.end();
      } else {
        console.warn(EXCEPTIONS.SEND_EVENTS);
      }
    }

    function addEvent(events, sourceEvent) {
      if (!(this instanceof Titanite)) {
        throw EXCEPTIONS.INCORRECT_BINDING;
      }

      var event = {};
      for (var key in sourceEvent) {
        event[key] = sourceEvent[key];
      }

      for (var defaultField in this.defaultFieldValues) {
        if (!event.hasOwnProperty(defaultField)) {
          event[defaultField] = this.defaultFieldValues[defaultField];
        }
      }

      var sessionId = event.sessionId || this.defaultFieldValues.sessionId;
      if (sessionId && !event.viewId) {
        event.viewId = this.sessionViewIds[sessionId];
      }

      if (!event.timestamp) {
        event.timestamp = Date.now();
      }

      if (typeof window !== 'undefined') {
        var deviceDimensions = {};
        var screen = window.screen;

        if (window.innerWidth) {
          deviceDimensions.viewportWidth = window.innerWidth;
          deviceDimensions.viewportHeight = window.innerHeight;
        }

        if (screen && screen.width) {
          deviceDimensions.screenWidth = screen.width;
          deviceDimensions.screenHeight = screen.height;
        }

        event.deviceDimensions = deviceDimensions;

        if (window.location) {
          event.urlHost = window.location.hostname;
          event.urlPath = window.location.pathname;
          event.urlQuery = window.location.search;
          event.urlFragment = window.location.hash;
        }
      }

      event.referrer = this.referrer;

      if (typeof window !== 'undefined' && window.location && window.location.search && !this.config.shouldExcludeDefaultField('utmCodes')) {
        var utmCodes = window.location.search.substring(1).split('&').reduce(function (acc, param) {
          if (UTM_PREFIX.test(param)) {
            var keyValue = param.split('=');

            // convert utm_source to raw_utm_source to rawUtmSource
            var key = ('raw_' + keyValue[0].toLowerCase()).replace(INVALID_UTM_CHARS, '').replace(SNAKE_CASE_DELIMETER, function (group) {
              return group[1].toUpperCase();
            });

            acc[key] = keyValue[1];
          }

          return acc;
        }, {});

        if (Object.keys(utmCodes).length) {
          event.utmCodes = utmCodes;
        }
      }

      var envelope = {};
      envelope[this.config.eventType] = event;
      events.push(envelope);
    }

    function noop() { }

    function sendEvents(events, processResponse) {
      if (!(this instanceof Titanite)) {
        throw EXCEPTIONS.INCORRECT_BINDING;
      }

      if (typeof processResponse !== 'function') {
        processResponse = noop;
      }

      var amethyst = AMETHYST_ENVS[this.config.amethystEnv];

      if (!amethyst) {
        throw EXCEPTIONS.NO_BASE_URL;
      } else if (!amethyst.endpoints) {
        throw EXCEPTIONS.NO_EVENT_ENDPOINT;
      } else if (!events.length) {
        console.warn(EXCEPTIONS.NO_EVENTS);
        return;
      }

      var attempts = 1;
      var endpoint = amethyst.endpoints.events;

      if (!endpoint) {
        throw EXCEPTIONS.NO_EVENT_ENDPOINT;
      }

      var envelope = { events: events };

      var attemptRequest = ((typeof this.sendRequest === 'function' && this.sendRequest) || sendRequest).bind(this, endpoint, envelope, function (response) {
        var data = Object.freeze({
          success: response.success,
          attempts: attempts,
          events: events,
          message: response.message,
          failedEvents: response.failedEvents
        });

        if (!response.success) {
          if (++attempts <= MAX_RETRIES) {
            console.warn(EXCEPTIONS.ERROR_SENDING);
            attemptRequest();
          } else {
            console.error(EXCEPTIONS.MAX_RETRIES);
            processResponse(data);
          }
        } else {
          if (response.statusCode >= 200 && response.statusCode <= 400) {
            if (Array.isArray(response.failedEvents)) {
              response.failedEvents.forEach(function (e) {
                console.error('Error sending event %s.', e.errorMessage);
              });
            }
          } else {
            console.error('Received %d from amethyst call. %s', response.statusCode, response.statusMessage);
          }

          processResponse(data);
        }
      });

      attemptRequest();
    }

    return {
      constructor: Titanite,
      addEvent: function (sourceEvent, processResponse) {
        var events = [];
        addEvent.call(this, events, sourceEvent);
        sendEvents.call(this, events, processResponse);
      },
      addEvents: function (sourceEvents, processResponse) {
        var events = [];
        for (var i = 0; i < sourceEvents.length; ++i) {
          addEvent.call(this, events, sourceEvents[i]);
        }
        sendEvents.call(this, events, processResponse);
      },
      startView: function (sessionId) {
        var sid = sessionId || this.defaultFieldValues.sessionId;
        if (sid) {
          this.sessionViewIds[sid] = generateUuid().replace(/-/g, ''); // viewId column is only 32 chars
        }
      },
      endView: function (sessionId) {
        var sid = sessionId || this.defaultFieldValues.sessionId;
        if (sid) {
          delete this.sessionViewIds[sid];
        }
      },
      setDefaultFieldValue: function (field, value) {
        if (value === null || value === undefined) {
          throw 'Default value may not be null or undefined for ' + field;
        }

        this.defaultFieldValues[field] = value;

        return this;
      }
    };
  })(this);

  function getHashlessHref () {
    return typeof window === 'object' && window.location && typeof window.location.href === 'string' ? window.location.href.split('#')[0] : '';
  }

  return Titanite;
});
